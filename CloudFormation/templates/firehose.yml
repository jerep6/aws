---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Firehose stream for logs'


###############################################################################
### Parameters
###############################################################################
Parameters:
  StreamName:
    Type: String
    Default: 'LogsToElasticsearch'
  ElasticsearchArn:
    Type: String
    Description: ARN of the Elasticsearch to send logs
  S3NameToWriteFailMessages:
    Type: String
    Default: ''
    Description: S3 bucket to log. If no bucket create it with random name
  LambdaToTransform:
    Type: String
    Default: ''
    Description: If no provided, no transformation is done
  CloudWatchLogsRetentionInDays:
    Description: 'The number of days log events are kept in CloudWatch Logs'
    Type: Number
    Default: 7
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]


###############################################################################
### Conditions
###############################################################################
Conditions:
  createS3: !Equals [!Ref S3NameToWriteFailMessages, '']
  transformStream: !Not [!Equals [!Ref LambdaToTransform, '']]

###############################################################################
### Outputs
###############################################################################
Outputs:
  S3:
    Description: 'S3 bucket name where messages in error are stored'
    Value: !If [createS3, !Ref S3ForFailMessage, !Ref S3NameToWriteFailMessages]
  FirehoStream:
    Value: !Ref DeliveryStream
  IAMRole:
    Value: !Ref IAMRole
  StreamName:
    Value: !Ref StreamName

###############################################################################
### Resources
###############################################################################
Resources:
  DeliveryStream:
    Type: "AWS::KinesisFirehose::DeliveryStream"
    DependsOn: LogGroupFirehose
    Properties:
      DeliveryStreamName: !Ref StreamName
      ElasticsearchDestinationConfiguration:
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref LogGroupFirehose
          LogStreamName: !Ref LogStreamElasticsearch
        DomainARN: !Ref ElasticsearchArn
        IndexName: logsfirehose
        TypeName: log
        IndexRotationPeriod: OneDay
        RetryOptions:
          DurationInSeconds: 180
        RoleARN: !GetAtt ["IAMRole", "Arn"]
        S3BackupMode: FailedDocumentsOnly
        S3Configuration:
          BucketARN: !If [createS3, !Sub "arn:aws:s3:::${S3ForFailMessage}", !Sub "arn:aws:s3:::${S3NameToWriteFailMessages}"]
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 5
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: !Ref LogGroupFirehose
            LogStreamName: !Ref LogStreamS3
          CompressionFormat: GZIP
          Prefix: firehose-logs
          RoleARN: !GetAtt ["IAMRole", "Arn"]


  LogGroupFirehose:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        RetentionInDays: !Ref CloudWatchLogsRetentionInDays

  LogStreamElasticsearch:
    Type: "AWS::Logs::LogStream"
    Properties:
      LogGroupName: !Ref LogGroupFirehose
      LogStreamName: ElasticsearchDelivery

  LogStreamS3:
    Type: "AWS::Logs::LogStream"
    Properties:
      LogGroupName: !Ref LogGroupFirehose
      LogStreamName: S3Delivery

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'firehose.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
          Condition:
            StringEquals:
              sts:ExternalId: !Ref 'AWS::AccountId'
      Path: '/'
      Policies:
        - PolicyName: AllowWriteToS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - "s3:AbortMultipartUpload"
                - "s3:GetBucketLocation"
                - "s3:GetObject"
                - "s3:ListBucket"
                - "s3:ListBucketMultipartUploads"
                - "s3:PutObject"
              Resource: !If
                  - createS3
                  - [!Sub "arn:aws:s3:::${S3ForFailMessage}", !Sub "arn:aws:s3:::${S3ForFailMessage}/*"]
                  - [!Sub "arn:aws:s3:::${S3NameToWriteFailMessages}", !Sub "arn:aws:s3:::${S3NameToWriteFailMessages}/*"]

        - PolicyName: AllowWriteToES
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - "es:DescribeElasticsearchDomain"
                - "es:DescribeElasticsearchDomains"
                - "es:DescribeElasticsearchDomainConfig"
                - "es:ESHttpPost"
                - "es:ESHttpPut"
              Resource:
                - !Ref ElasticsearchArn
                - !Sub "${ElasticsearchArn}/*"

        - PolicyName: AllowDescribeClusterState
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - "es:ESHttpGet"
              Resource:
                - !Sub "${ElasticsearchArn}/_all/_settings"
                - !Sub "${ElasticsearchArn}/_cluster/stats"
                - !Sub "${ElasticsearchArn}/index-name*/_mapping/type-name"
                - !Sub "${ElasticsearchArn}/_nodes"
                - !Sub "${ElasticsearchArn}/_nodes/stats"
                - !Sub "${ElasticsearchArn}/_nodes/*/stats"
                - !Sub "${ElasticsearchArn}/_stats"
                - !Sub "${ElasticsearchArn}/index-name*/_stats"

        - PolicyName: AllowCloudwatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - "logs:PutLogEvents"
              Resource:
                - !GetAtt ["LogGroupFirehose", "Arn"]

        - !If
          - transformStream
          -
            PolicyName: AllowInvokeLambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:GetFunctionConfiguration"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaToTransform}:$LATEST"
          - !Ref AWS::NoValue

  S3ForFailMessage:
    Type: "AWS::S3::Bucket"
