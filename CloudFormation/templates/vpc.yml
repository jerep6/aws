---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: Public and private subnets in 2 or 3 availability zones'

###############################################################################
### Metadata
###############################################################################
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: VPC Parameters
      Parameters:
      - ClassB


###############################################################################
### Parameters
###############################################################################
Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  NumberOfAZ:
    Description: 'Number of AZ to spread VPC'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be 2 or 3'
    MinValue: 2
    MaxValue: 3
  Env:
    Description: Environment
    Default: dev
    Type: String
  HAMode:
    Description: High Availability mode. false to create only one nat gateway and save money.
    Default: 'true'
    Type: String
    AllowedValues:
      - true
      - false


###############################################################################
### Output
###############################################################################
Outputs:
  AZs:
    Description: 'AZs'
    Value: !Ref NumberOfAZ
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  AZC:
    Condition: isThreeAZ
    Description: 'AZ of C'
    Value: !Select [2, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZC'
  ClassB:
    Description: 'Class B.'
    Value: !Ref ClassB
    Export:
      Name: !Sub '${AWS::StackName}-ClassB'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'

  SubnetsPublic:
    Description: 'Subnets public.'
    Value:
      !If
        - isThreeAZ
        - !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic, !Ref SubnetCPublic]]
        - !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'

  RouteTablePrivateA:
    Description: 'Route table private A.'
    Value: !Ref RouteTablePrivateA
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivateA'
  RouteTablePrivateB:
    Description: 'Route table private B.'
    Value: !Ref RouteTablePrivateB
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivateB'
  RouteTablePrivateC:
    Condition: isThreeAZ
    Description: 'Route table private C.'
    Value: !Ref RouteTablePrivateB
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivateC'

  RouteTablePublic:
    Description: 'Route table public.'
    Value: !Ref RouteTablePublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePublic'

  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'
  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'
  SubnetCPublic:
    Condition: isThreeAZ
    Description: 'Subnet C public.'
    Value: !Ref SubnetCPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPublic'

  SubnetAPrivate:
    Description: 'Subnet A private.'
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivate'
  SubnetBPrivate:
    Description: 'Subnet B private.'
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivate'
  SubnetCPrivate:
    Condition: isThreeAZ
    Description: 'Subnet C private.'
    Value: !Ref SubnetCPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPrivate'

  Env:
    Description: 'Environment'
    Value: !Ref Env
    Export:
      Name: !Sub '${AWS::StackName}-Env'

###############################################################################
### Conditions
###############################################################################
Conditions:
  isProdMode: !Equals [!Ref 'HAMode', 'true']
  isThreeAZ: !Equals [!Ref 'NumberOfAZ', 3]
  isProdModeThreeAZ: !And
    - !Condition isProdMode
    - !Condition isThreeAZ

###############################################################################
### Resources
###############################################################################

Resources:

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'


  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16 ${Env}'


  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


  ##### Subnets publics #####
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Public A ${Env}'
      - Key: Reach
        Value: public

  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Public B ${Env}'
      - Key: Reach
        Value: public

  SubnetCPublic:
    Type: 'AWS::EC2::Subnet'
    Condition: isThreeAZ
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.64.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Public C ${Env}'
      - Key: Reach
        Value: public

  ##### Subnets private #####
  SubnetAPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.16.0/20'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Private A ${Env}'
      - Key: Reach
        Value: private

  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.48.0/20'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Private B ${Env}'
      - Key: Reach
        Value: private

  SubnetCPrivate:
    Type: 'AWS::EC2::Subnet'
    Condition: isThreeAZ
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.80.0/20'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Private C ${Env}'
      - Key: Reach
        Value: private


  ##### Routes tables #####
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Public ${Env}'

  RouteTablePrivateA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Private A ${Env}'

  RouteTablePrivateB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Private B ${Env}'

  RouteTablePrivateC:
    Type: 'AWS::EC2::RouteTable'
    Condition: isThreeAZ
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Private C ${Env}'

  # public
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationCPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: isThreeAZ
    Properties:
      SubnetId: !Ref SubnetCPublic
      RouteTableId: !Ref RouteTablePublic


  # private
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTablePrivateA

  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTablePrivateB

  RouteTableAssociationCPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: isThreeAZ
    Properties:
      SubnetId: !Ref SubnetCPrivate
      RouteTableId: !Ref RouteTablePrivateC


  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway


  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Public ${Env}'


  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private


  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationCPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: isThreeAZ
    Properties:
      SubnetId: !Ref SubnetCPublic
      NetworkAclId: !Ref NetworkAclPublic


  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  SubnetNetworkAclAssociationCPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: isThreeAZ
    Properties:
      SubnetId: !Ref SubnetCPrivate
      NetworkAclId: !Ref NetworkAclPrivate


  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'


  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

### Nat Gateway
  EIPNatGatewayA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIPNatGatewayB:
    Type: AWS::EC2::EIP
    Condition: isProdMode
    Properties:
      Domain: vpc

  EIPNatGatewayC:
    Type: AWS::EC2::EIP
    Condition: isProdModeThreeAZ
    Properties:
      Domain: vpc


  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !Sub '${EIPNatGatewayA.AllocationId}'
      SubnetId: !Ref SubnetAPublic

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Condition: isProdMode
    Properties:
      AllocationId: !Sub '${EIPNatGatewayB.AllocationId}'
      SubnetId: !Ref SubnetAPublic

  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Condition: isProdModeThreeAZ
    Properties:
      AllocationId: !Sub '${EIPNatGatewayC.AllocationId}'
      SubnetId: !Ref SubnetCPublic


  RouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivateA
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA

  RouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivateB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !If [isProdMode, !Ref NatGatewayB, !Ref NatGatewayA]

  RouteC:
    Type: AWS::EC2::Route
    Condition: isThreeAZ
    Properties:
      RouteTableId: !Ref RouteTablePrivateC
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !If [isProdMode, !Ref NatGatewayC, !Ref NatGatewayA]

### Endpoints
  EndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
      - !Ref RouteTablePrivateA
      - !Ref RouteTablePrivateB
      - !If [isThreeAZ, !Ref RouteTablePrivateC, !Ref 'AWS::NoValue']
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
